syntax = "proto3";

package ghostchain.v1;

// GhostChain blockchain service
service GhostChain {
    // Wallet operations
    rpc GetBalance(BalanceRequest) returns (BalanceResponse);
    rpc SendTransaction(TransactionRequest) returns (TransactionResponse);
    rpc GetTransactionHistory(HistoryRequest) returns (HistoryResponse);
    
    // Smart contract operations (executed via ZVM)
    rpc DeployContract(DeployContractRequest) returns (DeployContractResponse);
    rpc CallContract(CallContractRequest) returns (CallContractResponse);
    rpc GetContractState(ContractStateRequest) returns (ContractStateResponse);
    
    // Chain info
    rpc GetChainInfo(ChainInfoRequest) returns (ChainInfoResponse);
    rpc GetBlockInfo(BlockInfoRequest) returns (BlockInfoResponse);
}

// Wallet operations
message BalanceRequest {
    string address = 1;
    repeated string tokens = 2; // MANA, SPIRIT, SOUL, RLUSD
}

message BalanceResponse {
    map<string, string> balances = 1; // token -> amount
}

message TransactionRequest {
    string from = 1;
    string to = 2;
    string amount = 3;
    string token = 4;
    bytes signature = 5;
}

message TransactionResponse {
    string transaction_hash = 1;
    bool success = 2;
    string error_message = 3;
}

message HistoryRequest {
    string address = 1;
    int32 limit = 2;
    string cursor = 3;
}

message HistoryResponse {
    repeated Transaction transactions = 1;
    string next_cursor = 2;
}

message Transaction {
    string hash = 1;
    string from = 2;
    string to = 3;
    string amount = 4;
    string token = 5;
    int64 timestamp = 6;
    bool success = 7;
}

// Smart contract operations (ZVM integration)
message DeployContractRequest {
    bytes wasm_code = 1; // WASM-Lite bytecode for ZVM
    bytes constructor_args = 2;
    string deployer = 3;
    bytes signature = 4;
}

message DeployContractResponse {
    string contract_address = 1;
    string transaction_hash = 2;
    bool success = 3;
    string error_message = 4;
}

message CallContractRequest {
    string contract_address = 1;
    string method = 2;
    bytes args = 3;
    string caller = 4;
    bytes signature = 5;
}

message CallContractResponse {
    bytes result = 1;
    bool success = 2;
    string error_message = 3;
    int64 gas_used = 4;
}

message ContractStateRequest {
    string contract_address = 1;
    string key = 2;
}

message ContractStateResponse {
    bytes value = 1;
}

// Chain info
message ChainInfoRequest {}

message ChainInfoResponse {
    string chain_id = 1;
    int64 latest_block = 2;
    string network = 3;
}

message BlockInfoRequest {
    int64 block_number = 1;
}

message BlockInfoResponse {
    int64 number = 1;
    string hash = 2;
    string parent_hash = 3;
    int64 timestamp = 4;
    repeated string transaction_hashes = 5;
}

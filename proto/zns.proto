syntax = "proto3";

package zns.v1;

// ZNS (Zig Name Service) for domain resolution
service ZNS {
    // Domain resolution
    rpc ResolveDomain(ResolveDomainRequest) returns (ResolveDomainResponse);
    rpc ResolveBatch(ResolveBatchRequest) returns (ResolveBatchResponse);
    rpc SubscribeDomainChanges(SubscribeDomainChangesRequest) returns (stream DomainChangeEvent);
    
    // Domain management
    rpc RegisterDomain(RegisterDomainRequest) returns (RegisterDomainResponse);
    rpc UpdateDomain(UpdateDomainRequest) returns (UpdateDomainResponse);
    rpc TransferDomain(TransferDomainRequest) returns (TransferDomainResponse);
    
    // Multi-service resolution (ENS, Unstoppable, etc.)
    rpc ResolveMultiService(ResolveMultiServiceRequest) returns (ResolveMultiServiceResponse);
}

message ResolveDomainRequest {
    string domain = 1;
    repeated string record_types = 2; // A, AAAA, TXT, etc.
}

message ResolveDomainResponse {
    DomainRecord domain_record = 1;
}

message ResolveBatchRequest {
    repeated string domains = 1;
    repeated string record_types = 2;
}

message ResolveBatchResponse {
    repeated DomainRecord domain_records = 1;
}

message SubscribeDomainChangesRequest {
    repeated string domains = 1;
}

message DomainChangeEvent {
    string domain = 1;
    string change_type = 2; // CREATED, UPDATED, DELETED
    DomainRecord new_record = 3;
    int64 timestamp = 4;
}

message RegisterDomainRequest {
    string domain = 1;
    string owner = 2;
    repeated DNSRecord initial_records = 3;
    bytes signature = 4;
}

message RegisterDomainResponse {
    bool success = 1;
    string transaction_hash = 2;
    string error_message = 3;
}

message UpdateDomainRequest {
    string domain = 1;
    repeated DNSRecord records = 2;
    string owner = 3;
    bytes signature = 4;
}

message UpdateDomainResponse {
    bool success = 1;
    string error_message = 2;
}

message TransferDomainRequest {
    string domain = 1;
    string current_owner = 2;
    string new_owner = 3;
    bytes signature = 4;
}

message TransferDomainResponse {
    bool success = 1;
    string transaction_hash = 2;
    string error_message = 3;
}

// Multi-service resolution (ENS, Unstoppable Domains, etc.)
message ResolveMultiServiceRequest {
    string domain = 1;
    repeated string services = 2; // ENS, UNSTOPPABLE, GHOST
    repeated string record_types = 3;
}

message ResolveMultiServiceResponse {
    repeated ServiceResolution resolutions = 1;
}

message ServiceResolution {
    string service = 1;
    bool success = 2;
    DomainRecord record = 3;
    string error_message = 4;
}

message DomainRecord {
    string domain = 1;
    repeated DNSRecord records = 2;
    map<string, string> crypto_addresses = 3; // chain -> address
    string owner_id = 4;
    string resolver = 5;
    bytes signature = 6;
    int64 ttl = 7;
    int64 timestamp = 8;
}

message DNSRecord {
    string type = 1; // A, AAAA, TXT, MX, etc.
    string value = 2;
    int32 ttl = 3;
    int32 priority = 4; // For MX records
}

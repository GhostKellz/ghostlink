// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResolveDomainRequest {
    #[prost(string, tag = "1")]
    pub domain: ::prost::alloc::string::String,
    /// A, AAAA, TXT, etc.
    #[prost(string, repeated, tag = "2")]
    pub record_types: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResolveDomainResponse {
    #[prost(message, optional, tag = "1")]
    pub domain_record: ::core::option::Option<DomainRecord>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResolveBatchRequest {
    #[prost(string, repeated, tag = "1")]
    pub domains: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "2")]
    pub record_types: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResolveBatchResponse {
    #[prost(message, repeated, tag = "1")]
    pub domain_records: ::prost::alloc::vec::Vec<DomainRecord>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeDomainChangesRequest {
    #[prost(string, repeated, tag = "1")]
    pub domains: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DomainChangeEvent {
    #[prost(string, tag = "1")]
    pub domain: ::prost::alloc::string::String,
    /// CREATED, UPDATED, DELETED
    #[prost(string, tag = "2")]
    pub change_type: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub new_record: ::core::option::Option<DomainRecord>,
    #[prost(int64, tag = "4")]
    pub timestamp: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterDomainRequest {
    #[prost(string, tag = "1")]
    pub domain: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub owner: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub initial_records: ::prost::alloc::vec::Vec<DnsRecord>,
    #[prost(bytes = "vec", tag = "4")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterDomainResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub transaction_hash: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateDomainRequest {
    #[prost(string, tag = "1")]
    pub domain: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub records: ::prost::alloc::vec::Vec<DnsRecord>,
    #[prost(string, tag = "3")]
    pub owner: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "4")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateDomainResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub error_message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransferDomainRequest {
    #[prost(string, tag = "1")]
    pub domain: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub current_owner: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub new_owner: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "4")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransferDomainResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub transaction_hash: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
}
/// Multi-service resolution (ENS, Unstoppable Domains, etc.)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResolveMultiServiceRequest {
    #[prost(string, tag = "1")]
    pub domain: ::prost::alloc::string::String,
    /// ENS, UNSTOPPABLE, GHOST
    #[prost(string, repeated, tag = "2")]
    pub services: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "3")]
    pub record_types: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResolveMultiServiceResponse {
    #[prost(message, repeated, tag = "1")]
    pub resolutions: ::prost::alloc::vec::Vec<ServiceResolution>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServiceResolution {
    #[prost(string, tag = "1")]
    pub service: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(message, optional, tag = "3")]
    pub record: ::core::option::Option<DomainRecord>,
    #[prost(string, tag = "4")]
    pub error_message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DomainRecord {
    #[prost(string, tag = "1")]
    pub domain: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub records: ::prost::alloc::vec::Vec<DnsRecord>,
    /// chain -> address
    #[prost(map = "string, string", tag = "3")]
    pub crypto_addresses: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(string, tag = "4")]
    pub owner_id: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub resolver: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "6")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    #[prost(int64, tag = "7")]
    pub ttl: i64,
    #[prost(int64, tag = "8")]
    pub timestamp: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DnsRecord {
    /// A, AAAA, TXT, MX, etc.
    #[prost(string, tag = "1")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub value: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub ttl: i32,
    /// For MX records
    #[prost(int32, tag = "4")]
    pub priority: i32,
}
/// Generated client implementations.
pub mod zns_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// ZNS (Zig Name Service) for domain resolution
    #[derive(Debug, Clone)]
    pub struct ZnsClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ZnsClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ZnsClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ZnsClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ZnsClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Domain resolution
        pub async fn resolve_domain(
            &mut self,
            request: impl tonic::IntoRequest<super::ResolveDomainRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ResolveDomainResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/zns.v1.ZNS/ResolveDomain");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("zns.v1.ZNS", "ResolveDomain"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn resolve_batch(
            &mut self,
            request: impl tonic::IntoRequest<super::ResolveBatchRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ResolveBatchResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/zns.v1.ZNS/ResolveBatch");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("zns.v1.ZNS", "ResolveBatch"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn subscribe_domain_changes(
            &mut self,
            request: impl tonic::IntoRequest<super::SubscribeDomainChangesRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::DomainChangeEvent>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/zns.v1.ZNS/SubscribeDomainChanges",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("zns.v1.ZNS", "SubscribeDomainChanges"));
            self.inner.server_streaming(req, path, codec).await
        }
        /// Domain management
        pub async fn register_domain(
            &mut self,
            request: impl tonic::IntoRequest<super::RegisterDomainRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RegisterDomainResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/zns.v1.ZNS/RegisterDomain",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("zns.v1.ZNS", "RegisterDomain"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_domain(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateDomainRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateDomainResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/zns.v1.ZNS/UpdateDomain");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("zns.v1.ZNS", "UpdateDomain"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn transfer_domain(
            &mut self,
            request: impl tonic::IntoRequest<super::TransferDomainRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TransferDomainResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/zns.v1.ZNS/TransferDomain",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("zns.v1.ZNS", "TransferDomain"));
            self.inner.unary(req, path, codec).await
        }
        /// Multi-service resolution (ENS, Unstoppable, etc.)
        pub async fn resolve_multi_service(
            &mut self,
            request: impl tonic::IntoRequest<super::ResolveMultiServiceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ResolveMultiServiceResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/zns.v1.ZNS/ResolveMultiService",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("zns.v1.ZNS", "ResolveMultiService"));
            self.inner.unary(req, path, codec).await
        }
    }
}

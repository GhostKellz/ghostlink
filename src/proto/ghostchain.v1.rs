// This file is @generated by prost-build.
/// Wallet operations
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BalanceRequest {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    /// MANA, SPIRIT, SOUL, RLUSD
    #[prost(string, repeated, tag = "2")]
    pub tokens: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BalanceResponse {
    /// token -> amount
    #[prost(map = "string, string", tag = "1")]
    pub balances: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransactionRequest {
    #[prost(string, tag = "1")]
    pub from: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub to: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub amount: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub token: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "5")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransactionResponse {
    #[prost(string, tag = "1")]
    pub transaction_hash: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HistoryRequest {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub limit: i32,
    #[prost(string, tag = "3")]
    pub cursor: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HistoryResponse {
    #[prost(message, repeated, tag = "1")]
    pub transactions: ::prost::alloc::vec::Vec<Transaction>,
    #[prost(string, tag = "2")]
    pub next_cursor: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transaction {
    #[prost(string, tag = "1")]
    pub hash: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub from: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub to: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub amount: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub token: ::prost::alloc::string::String,
    #[prost(int64, tag = "6")]
    pub timestamp: i64,
    #[prost(bool, tag = "7")]
    pub success: bool,
}
/// Smart contract operations (ZVM integration)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeployContractRequest {
    /// WASM-Lite bytecode for ZVM
    #[prost(bytes = "vec", tag = "1")]
    pub wasm_code: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub constructor_args: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "3")]
    pub deployer: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "4")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeployContractResponse {
    #[prost(string, tag = "1")]
    pub contract_address: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub transaction_hash: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub success: bool,
    #[prost(string, tag = "4")]
    pub error_message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CallContractRequest {
    #[prost(string, tag = "1")]
    pub contract_address: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub method: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "3")]
    pub args: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "4")]
    pub caller: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "5")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CallContractResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub result: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
    #[prost(int64, tag = "4")]
    pub gas_used: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContractStateRequest {
    #[prost(string, tag = "1")]
    pub contract_address: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub key: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContractStateResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub value: ::prost::alloc::vec::Vec<u8>,
}
/// Chain info
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChainInfoRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChainInfoResponse {
    #[prost(string, tag = "1")]
    pub chain_id: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub latest_block: i64,
    #[prost(string, tag = "3")]
    pub network: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BlockInfoRequest {
    #[prost(int64, tag = "1")]
    pub block_number: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockInfoResponse {
    #[prost(int64, tag = "1")]
    pub number: i64,
    #[prost(string, tag = "2")]
    pub hash: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub parent_hash: ::prost::alloc::string::String,
    #[prost(int64, tag = "4")]
    pub timestamp: i64,
    #[prost(string, repeated, tag = "5")]
    pub transaction_hashes: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Generated client implementations.
pub mod ghost_chain_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// GhostChain blockchain service
    #[derive(Debug, Clone)]
    pub struct GhostChainClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl GhostChainClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> GhostChainClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> GhostChainClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            GhostChainClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Wallet operations
        pub async fn get_balance(
            &mut self,
            request: impl tonic::IntoRequest<super::BalanceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BalanceResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/ghostchain.v1.GhostChain/GetBalance",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("ghostchain.v1.GhostChain", "GetBalance"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn send_transaction(
            &mut self,
            request: impl tonic::IntoRequest<super::TransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TransactionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/ghostchain.v1.GhostChain/SendTransaction",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("ghostchain.v1.GhostChain", "SendTransaction"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_transaction_history(
            &mut self,
            request: impl tonic::IntoRequest<super::HistoryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::HistoryResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/ghostchain.v1.GhostChain/GetTransactionHistory",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("ghostchain.v1.GhostChain", "GetTransactionHistory"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Smart contract operations (executed via ZVM)
        pub async fn deploy_contract(
            &mut self,
            request: impl tonic::IntoRequest<super::DeployContractRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeployContractResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/ghostchain.v1.GhostChain/DeployContract",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("ghostchain.v1.GhostChain", "DeployContract"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn call_contract(
            &mut self,
            request: impl tonic::IntoRequest<super::CallContractRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CallContractResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/ghostchain.v1.GhostChain/CallContract",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("ghostchain.v1.GhostChain", "CallContract"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_contract_state(
            &mut self,
            request: impl tonic::IntoRequest<super::ContractStateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ContractStateResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/ghostchain.v1.GhostChain/GetContractState",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("ghostchain.v1.GhostChain", "GetContractState"));
            self.inner.unary(req, path, codec).await
        }
        /// Chain info
        pub async fn get_chain_info(
            &mut self,
            request: impl tonic::IntoRequest<super::ChainInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ChainInfoResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/ghostchain.v1.GhostChain/GetChainInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("ghostchain.v1.GhostChain", "GetChainInfo"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_block_info(
            &mut self,
            request: impl tonic::IntoRequest<super::BlockInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BlockInfoResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/ghostchain.v1.GhostChain/GetBlockInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("ghostchain.v1.GhostChain", "GetBlockInfo"));
            self.inner.unary(req, path, codec).await
        }
    }
}
